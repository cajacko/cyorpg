{"version":3,"sources":["components/App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","fab","margin","spacing","position","bottom","right","delete","left","emotion","fontFamily","fontSize","paper","width","backgroundColor","palette","background","boxShadow","shadows","padding","outline","top","transform","container","display","alignItems","justifyContent","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setEmotion","_React$useState3","_React$useState4","emotions","setEmotions","_React$useState5","_React$useState6","showInput","setShowInput","_React$useState7","_React$useState8","inputValue","setInputValue","classes","setRandEmotion","emotionsArg","arr","rand","Math","floor","random","length","useEffect","fetch","headers","secret-key","then","res","json","contents","react_default","a","createElement","className","Fab","color","aria-label","onClick","emotionsToSet","filter","emo","method","Content-Type","body","JSON","stringify","Delete_default","Add_default","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoFocus","label","fullWidth","value","onChange","event","target","DialogActions","Button","concat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6a744662.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  fab: {\n    margin: theme.spacing(2),\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n  },\n  delete: {\n    margin: theme.spacing(2),\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n  },\n  emotion: {\n    fontFamily: 'helvetica, sans-serif',\n    fontSize: 50,\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n    outline: 'none',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}));\n\n/**\n * App component\n */\nconst App: React.FC = () => {\n  const [emotion, setEmotion] = React.useState('Loading');\n  const [emotions, setEmotions] = React.useState<string[]>([]);\n  const [showInput, setShowInput] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState('');\n  const classes = useStyles();\n\n  /**\n   * Set a random emotion\n   */\n  const setRandEmotion = (emotionsArg?: string[]) => {\n    const arr = emotionsArg || emotions;\n    const rand = arr[Math.floor(Math.random() * arr.length)];\n\n    setEmotion(rand || 'No emotion to set');\n  };\n\n  /**\n   * Delete emotion\n   */\n  const deleteEmotion = () => {\n    const emotionsToSet = emotions.filter(emo => emo !== emotion);\n\n    setEmotions(emotionsToSet);\n    setRandEmotion(emotionsToSet);\n\n    fetch('https://api.jsonbin.io/b/5d029c6e4f234842a564ef57', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'secret-key': '$2a$10$89POHX9tTf1imV1Z8UiQ6Ov0WSLocHomZ3OaRecBZ4gfiospExTZ.',\n      },\n      body: JSON.stringify({\n        emotions: emotionsToSet,\n      }),\n    });\n  };\n\n  /**\n   * Set remote emotions\n   */\n  const setRemoteEmotions = () => {\n    setShowInput(false);\n    const emotionsToSet = emotions.concat([inputValue]);\n\n    setEmotions(emotionsToSet);\n\n    fetch('https://api.jsonbin.io/b/5d029c6e4f234842a564ef57', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'secret-key': '$2a$10$89POHX9tTf1imV1Z8UiQ6Ov0WSLocHomZ3OaRecBZ4gfiospExTZ.',\n      },\n      body: JSON.stringify({\n        emotions: emotionsToSet,\n      }),\n    });\n  };\n\n  React.useEffect(() => {\n    fetch('https://api.jsonbin.io/b/5d029c6e4f234842a564ef57/latest', {\n      headers: {\n        'secret-key': '$2a$10$89POHX9tTf1imV1Z8UiQ6Ov0WSLocHomZ3OaRecBZ4gfiospExTZ.',\n      },\n    })\n      .then(res => res.json())\n      .then((contents) => {\n        setEmotions(contents.emotions);\n        setRandEmotion(contents.emotions);\n      });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className={classes.container}>\n      <p className={classes.emotion}>{emotion}</p>\n      <Fab color=\"primary\" aria-label=\"Add\" className={classes.delete} onClick={deleteEmotion}>\n        <DeleteIcon />\n      </Fab>\n      <Fab\n        color=\"primary\"\n        aria-label=\"Add\"\n        className={classes.fab}\n        onClick={() => setShowInput(true)}\n      >\n        <AddIcon />\n      </Fab>\n      <Dialog\n        open={showInput}\n        onClose={() => setShowInput(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add an Emotion</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Emotion\"\n            fullWidth\n            value={inputValue}\n            onChange={event => setInputValue(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowInput(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={setRemoteEmotions} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\n/**\n * Register a valid service worker\n */\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check the service worker is valid\n */\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * Register the service worker\n */\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Unregister the service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}